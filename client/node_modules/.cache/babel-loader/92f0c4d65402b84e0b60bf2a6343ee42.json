{"ast":null,"code":"const API_KEY = 'b41ebc557f327c6c95cd8ab3ce1b25f6';\nconst QUERY_SIZE = 36;\nconst MAX_PAGE = 8;\nconst DATE_BOUNDARIES = {\n  minYear: 2016,\n  maxYear: 2020,\n  minMonth: 1,\n  maxMonth: 13,\n  minDay: 1,\n  maxDay: 29\n};\nconst ENDPOINT_PREFIX = 'https://www.flickr.com/services/rest/?method=flickr.interestingness.getList&format=json&safe_search=3';\n\nfunction generateRandomInt(min, max) {\n  const roundedMin = Math.ceil(min);\n  const roundedMax = Math.floor(max);\n  return Math.floor(Math.random() * (roundedMax - roundedMin)) + roundedMin;\n}\n\nfunction generateRandomDate(dateBoundaries) {\n  const {\n    minYear,\n    maxYear,\n    minMonth,\n    maxMonth,\n    minDay,\n    maxDay\n  } = dateBoundaries;\n  const year = generateRandomInt(minYear, maxYear);\n  const month = generateRandomInt(minMonth, maxMonth);\n  const day = generateRandomInt(minDay, maxDay);\n  return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`;\n}\n\nfunction generateApiEndpoint() {\n  const date = generateRandomDate(DATE_BOUNDARIES);\n  const page = generateRandomInt(1, MAX_PAGE);\n  return `${ENDPOINT_PREFIX}api_key=${API_KEY}&page=${page}&date=${date}&per_page=${QUERY_SIZE}`;\n}\n\nfunction urlFromProperties(farmId, serverId, id, secret) {\n  return `https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}_q.jpg`;\n}\n\nasync function fetchRawImages() {\n  const response = await fetch(generateApiEndpoint());\n\n  if (response.status !== 200) {\n    throw new Error('There was a problem fetching images');\n  }\n\n  const rawJson = await response.text();\n  const imagesJson = JSON.parse(rawJson.slice(14, -1));\n  return imagesJson.photos.photo;\n}\n\nexport default async function fetchImageUrls() {\n  const rawImages = await fetchRawImages();\n  return rawImages.map(image => urlFromProperties(image.farm, image.server, image.id, image.secret));\n}","map":{"version":3,"sources":["/Users/kevincolkitt/Desktop/rb/client/src/imageUtils.js"],"names":["API_KEY","QUERY_SIZE","MAX_PAGE","DATE_BOUNDARIES","minYear","maxYear","minMonth","maxMonth","minDay","maxDay","ENDPOINT_PREFIX","generateRandomInt","min","max","roundedMin","Math","ceil","roundedMax","floor","random","generateRandomDate","dateBoundaries","year","month","day","generateApiEndpoint","date","page","urlFromProperties","farmId","serverId","id","secret","fetchRawImages","response","fetch","status","Error","rawJson","text","imagesJson","JSON","parse","slice","photos","photo","fetchImageUrls","rawImages","map","image","farm","server"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAhB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE,IADa;AAEtBC,EAAAA,OAAO,EAAE,IAFa;AAGtBC,EAAAA,QAAQ,EAAE,CAHY;AAItBC,EAAAA,QAAQ,EAAE,EAJY;AAKtBC,EAAAA,MAAM,EAAE,CALc;AAMtBC,EAAAA,MAAM,EAAE;AANc,CAAxB;AASA,MAAMC,eAAe,GAAG,uGAAxB;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AACnC,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,GAAV,CAAnB;AACA,QAAMK,UAAU,GAAGF,IAAI,CAACG,KAAL,CAAWL,GAAX,CAAnB;AACA,SAAOE,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACI,MAAL,MAAiBF,UAAU,GAAGH,UAA9B,CAAX,IAAwDA,UAA/D;AACD;;AAED,SAASM,kBAAT,CAA4BC,cAA5B,EAA4C;AAC1C,QAAM;AACJjB,IAAAA,OADI;AACKC,IAAAA,OADL;AACcC,IAAAA,QADd;AACwBC,IAAAA,QADxB;AACkCC,IAAAA,MADlC;AAC0CC,IAAAA;AAD1C,MAEFY,cAFJ;AAIA,QAAMC,IAAI,GAAGX,iBAAiB,CAACP,OAAD,EAAUC,OAAV,CAA9B;AACA,QAAMkB,KAAK,GAAGZ,iBAAiB,CAACL,QAAD,EAAWC,QAAX,CAA/B;AACA,QAAMiB,GAAG,GAAGb,iBAAiB,CAACH,MAAD,EAASC,MAAT,CAA7B;AAEA,SAAQ,GAAEa,IAAK,IAAGC,KAAK,GAAG,EAAR,GAAa,GAAb,GAAmB,EAAG,GAAEA,KAAM,IAAGC,GAAG,GAAG,EAAN,GAAW,GAAX,GAAiB,EAAG,GAAEA,GAAI,EAA7E;AACD;;AAED,SAASC,mBAAT,GAA+B;AAC7B,QAAMC,IAAI,GAAGN,kBAAkB,CAACjB,eAAD,CAA/B;AACA,QAAMwB,IAAI,GAAGhB,iBAAiB,CAAC,CAAD,EAAIT,QAAJ,CAA9B;AAEA,SAAQ,GAAEQ,eAAgB,WAAUV,OAAQ,SAAQ2B,IAAK,SAAQD,IAAK,aAAYzB,UAAW,EAA7F;AACD;;AAED,SAAS2B,iBAAT,CAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,EAA7C,EAAiDC,MAAjD,EAAyD;AACvD,SAAQ,eAAcH,MAAO,qBAAoBC,QAAS,IAAGC,EAAG,IAAGC,MAAO,QAA1E;AACD;;AAED,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,mBAAmB,EAApB,CAA5B;;AAEA,MAAIS,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,QAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;AAEA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,KAAR,CAAc,EAAd,EAAkB,CAAC,CAAnB,CAAX,CAAnB;AAEA,SAAOH,UAAU,CAACI,MAAX,CAAkBC,KAAzB;AACD;;AAED,eAAe,eAAeC,cAAf,GAAgC;AAC7C,QAAMC,SAAS,GAAG,MAAMd,cAAc,EAAtC;AAEA,SAAOc,SAAS,CAACC,GAAV,CAAeC,KAAD,IAAWrB,iBAAiB,CAC/CqB,KAAK,CAACC,IADyC,EACnCD,KAAK,CAACE,MAD6B,EACrBF,KAAK,CAAClB,EADe,EACXkB,KAAK,CAACjB,MADK,CAA1C,CAAP;AAGD","sourcesContent":["const API_KEY = 'b41ebc557f327c6c95cd8ab3ce1b25f6';\nconst QUERY_SIZE = 36;\nconst MAX_PAGE = 8;\n\nconst DATE_BOUNDARIES = {\n  minYear: 2016,\n  maxYear: 2020,\n  minMonth: 1,\n  maxMonth: 13,\n  minDay: 1,\n  maxDay: 29,\n};\n\nconst ENDPOINT_PREFIX = 'https://www.flickr.com/services/rest/?method=flickr.interestingness.getList&format=json&safe_search=3';\n\nfunction generateRandomInt(min, max) {\n  const roundedMin = Math.ceil(min);\n  const roundedMax = Math.floor(max);\n  return Math.floor(Math.random() * (roundedMax - roundedMin)) + roundedMin;\n}\n\nfunction generateRandomDate(dateBoundaries) {\n  const {\n    minYear, maxYear, minMonth, maxMonth, minDay, maxDay,\n  } = dateBoundaries;\n\n  const year = generateRandomInt(minYear, maxYear);\n  const month = generateRandomInt(minMonth, maxMonth);\n  const day = generateRandomInt(minDay, maxDay);\n\n  return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`;\n}\n\nfunction generateApiEndpoint() {\n  const date = generateRandomDate(DATE_BOUNDARIES);\n  const page = generateRandomInt(1, MAX_PAGE);\n\n  return `${ENDPOINT_PREFIX}api_key=${API_KEY}&page=${page}&date=${date}&per_page=${QUERY_SIZE}`;\n}\n\nfunction urlFromProperties(farmId, serverId, id, secret) {\n  return `https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}_q.jpg`;\n}\n\nasync function fetchRawImages() {\n  const response = await fetch(generateApiEndpoint());\n\n  if (response.status !== 200) {\n    throw new Error('There was a problem fetching images');\n  }\n\n  const rawJson = await response.text();\n\n  const imagesJson = JSON.parse(rawJson.slice(14, -1));\n\n  return imagesJson.photos.photo;\n}\n\nexport default async function fetchImageUrls() {\n  const rawImages = await fetchRawImages();\n\n  return rawImages.map((image) => urlFromProperties(\n    image.farm, image.server, image.id, image.secret,\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}