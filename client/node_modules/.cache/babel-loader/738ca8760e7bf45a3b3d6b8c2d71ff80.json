{"ast":null,"code":"const API_KEY = 'b41ebc557f327c6c95cd8ab3ce1b25f6';\nconst QUERY_SIZE = 36;\nconst DATE_BOUNDARIES = {\n  MIN_YEAR: 2016,\n  MAX_YEAR: 2020,\n  MIN_MONTH: 1,\n  MAX_MONTH: 13,\n  MIN_DAY: 1,\n  MAX_DAY: 29,\n  MAX_PAGE: 8\n};\nconst MIN_YEAR = 2016;\nconst MAX_YEAR = 2020;\nconst MIN_MONTH = 1;\nconst MAX_MONTH = 13;\nconst MIN_DAY = 1;\nconst MAX_DAY = 29;\nconst MAX_PAGE = 8;\n\nfunction generateRandomInt(min, max) {\n  const roundedMin = Math.ceil(min);\n  const roundedMax = Math.floor(max);\n  return Math.floor(Math.random() * (roundedMax - roundedMin)) + roundedMin;\n}\n\nfunction generateRandomDate(minYear, maxYear, minMonth, maxMonth, minDay, maxDay) {\n  const year = generateRandomInt(minYear, maxYear);\n  const month = generateRandomInt(minMonth, maxMonth);\n  const day = generateRandomInt(minDay, maxDay);\n  return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`;\n}\n\nfunction generateApiEndpoint() {\n  const date = generateRandomDate(MIN_YEAR, MAX_YEAR, MIN_MONTH, MAX_MONTH, MIN_DAY, MAX_DAY);\n  const page = generateRandomInt(1, MAX_PAGE);\n  return `https://www.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&safe_search=3&page=${page}&date=${date}&per_page=${QUERY_SIZE}`;\n}\n\nfunction urlFromProperties(farmId, serverId, id, secret) {\n  return `https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}_q.jpg`;\n}\n\nasync function fetchRawImages() {\n  const response = await fetch(generateApiEndpoint()); // Bad response status\n\n  const rawJson = await response.text();\n  const imagesJson = JSON.parse(rawJson.slice(14, -1));\n  return imagesJson.photos.photo;\n}\n\nexport default async function fetchImageUrls() {\n  const rawImages = await fetchRawImages();\n  return rawImages.map(image => urlFromProperties(image.farm, image.server, image.id, image.secret));\n}","map":{"version":3,"sources":["/Users/kevincolkitt/Desktop/rb/client/src/imageUtils.js"],"names":["API_KEY","QUERY_SIZE","DATE_BOUNDARIES","MIN_YEAR","MAX_YEAR","MIN_MONTH","MAX_MONTH","MIN_DAY","MAX_DAY","MAX_PAGE","generateRandomInt","min","max","roundedMin","Math","ceil","roundedMax","floor","random","generateRandomDate","minYear","maxYear","minMonth","maxMonth","minDay","maxDay","year","month","day","generateApiEndpoint","date","page","urlFromProperties","farmId","serverId","id","secret","fetchRawImages","response","fetch","rawJson","text","imagesJson","JSON","parse","slice","photos","photo","fetchImageUrls","rawImages","map","image","farm","server"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAhB;AACA,MAAMC,UAAU,GAAG,EAAnB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE,IADY;AAEtBC,EAAAA,QAAQ,EAAE,IAFY;AAGtBC,EAAAA,SAAS,EAAE,CAHW;AAItBC,EAAAA,SAAS,EAAE,EAJW;AAKtBC,EAAAA,OAAO,EAAE,CALa;AAMtBC,EAAAA,OAAO,EAAE,EANa;AAOtBC,EAAAA,QAAQ,EAAE;AAPY,CAAxB;AASA,MAAMN,QAAQ,GAAG,IAAjB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,OAAO,GAAG,CAAhB;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,QAAQ,GAAG,CAAjB;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AACnC,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,GAAV,CAAnB;AACA,QAAMK,UAAU,GAAGF,IAAI,CAACG,KAAL,CAAWL,GAAX,CAAnB;AACA,SAAOE,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACI,MAAL,MAAiBF,UAAU,GAAGH,UAA9B,CAAX,IAAwDA,UAA/D;AACD;;AAED,SAASM,kBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8CC,QAA9C,EAAwDC,QAAxD,EAAkEC,MAAlE,EAA0EC,MAA1E,EAAkF;AAChF,QAAMC,IAAI,GAAGhB,iBAAiB,CAACU,OAAD,EAAUC,OAAV,CAA9B;AACA,QAAMM,KAAK,GAAGjB,iBAAiB,CAACY,QAAD,EAAWC,QAAX,CAA/B;AACA,QAAMK,GAAG,GAAGlB,iBAAiB,CAACc,MAAD,EAASC,MAAT,CAA7B;AAEA,SAAQ,GAAEC,IAAK,IAAGC,KAAK,GAAG,EAAR,GAAa,GAAb,GAAmB,EAAG,GAAEA,KAAM,IAAGC,GAAG,GAAG,EAAN,GAAW,GAAX,GAAiB,EAAG,GAAEA,GAAI,EAA7E;AACD;;AAED,SAASC,mBAAT,GAA+B;AAC7B,QAAMC,IAAI,GAAGX,kBAAkB,CAAChB,QAAD,EAAWC,QAAX,EAAqBC,SAArB,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoDC,OAApD,CAA/B;AACA,QAAMuB,IAAI,GAAGrB,iBAAiB,CAAC,CAAD,EAAID,QAAJ,CAA9B;AAEA,SAAQ,uFAAsFT,OAAQ,mCAAkC+B,IAAK,SAAQD,IAAK,aAAY7B,UAAW,EAAjL;AACD;;AAED,SAAS+B,iBAAT,CAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,EAA7C,EAAiDC,MAAjD,EAAyD;AACvD,SAAQ,eAAcH,MAAO,qBAAoBC,QAAS,IAAGC,EAAG,IAAGC,MAAO,QAA1E;AACD;;AAED,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,mBAAmB,EAApB,CAA5B,CAD8B,CAG9B;;AACA,QAAMW,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AAEA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,KAAR,CAAc,EAAd,EAAkB,CAAC,CAAnB,CAAX,CAAnB;AAEA,SAAOH,UAAU,CAACI,MAAX,CAAkBC,KAAzB;AACD;;AAED,eAAe,eAAeC,cAAf,GAAgC;AAC7C,QAAMC,SAAS,GAAG,MAAMZ,cAAc,EAAtC;AAEA,SAAOY,SAAS,CAACC,GAAV,CAAeC,KAAD,IAAWnB,iBAAiB,CAC/CmB,KAAK,CAACC,IADyC,EACnCD,KAAK,CAACE,MAD6B,EACrBF,KAAK,CAAChB,EADe,EACXgB,KAAK,CAACf,MADK,CAA1C,CAAP;AAGD","sourcesContent":["const API_KEY = 'b41ebc557f327c6c95cd8ab3ce1b25f6';\nconst QUERY_SIZE = 36;\n\nconst DATE_BOUNDARIES = {\n  MIN_YEAR: 2016,\n  MAX_YEAR: 2020,\n  MIN_MONTH: 1,\n  MAX_MONTH: 13,\n  MIN_DAY: 1,\n  MAX_DAY: 29,\n  MAX_PAGE: 8,\n};\nconst MIN_YEAR = 2016;\nconst MAX_YEAR = 2020;\nconst MIN_MONTH = 1;\nconst MAX_MONTH = 13;\nconst MIN_DAY = 1;\nconst MAX_DAY = 29;\nconst MAX_PAGE = 8;\n\nfunction generateRandomInt(min, max) {\n  const roundedMin = Math.ceil(min);\n  const roundedMax = Math.floor(max);\n  return Math.floor(Math.random() * (roundedMax - roundedMin)) + roundedMin;\n}\n\nfunction generateRandomDate(minYear, maxYear, minMonth, maxMonth, minDay, maxDay) {\n  const year = generateRandomInt(minYear, maxYear);\n  const month = generateRandomInt(minMonth, maxMonth);\n  const day = generateRandomInt(minDay, maxDay);\n\n  return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`;\n}\n\nfunction generateApiEndpoint() {\n  const date = generateRandomDate(MIN_YEAR, MAX_YEAR, MIN_MONTH, MAX_MONTH, MIN_DAY, MAX_DAY);\n  const page = generateRandomInt(1, MAX_PAGE);\n\n  return `https://www.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&safe_search=3&page=${page}&date=${date}&per_page=${QUERY_SIZE}`;\n}\n\nfunction urlFromProperties(farmId, serverId, id, secret) {\n  return `https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}_q.jpg`;\n}\n\nasync function fetchRawImages() {\n  const response = await fetch(generateApiEndpoint());\n\n  // Bad response status\n  const rawJson = await response.text();\n\n  const imagesJson = JSON.parse(rawJson.slice(14, -1));\n\n  return imagesJson.photos.photo;\n}\n\nexport default async function fetchImageUrls() {\n  const rawImages = await fetchRawImages();\n\n  return rawImages.map((image) => urlFromProperties(\n    image.farm, image.server, image.id, image.secret,\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}