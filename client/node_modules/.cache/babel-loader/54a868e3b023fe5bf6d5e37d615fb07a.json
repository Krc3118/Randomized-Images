{"ast":null,"code":"const API_KEY = 'b41ebc557f327c6c95cd8ab3ce1b25f6';\nconst QUERY_SIZE = 36;\nconst MIN_YEAR = 2016;\nconst MAX_YEAR = 2020;\nconst MIN_MONTH = 1;\nconst MAX_MONTH = 13;\nconst MIN_DAY = 1;\nconst MAX_DAY = 29;\nconst MAX_PAGE = 8;\nexport async function fetchImageUrls() {\n  const rawImages = await fetchRawImages();\n  return rawImages.map(image => urlFromProperties(image.farm, image.server, image.id, image.secret));\n}\n\nasync function fetchRawImages() {\n  const response = await fetch(generateApiEndpoint(50)); //Bad response status\n\n  const rawJson = await response.text();\n  const imagesJson = JSON.parse(rawJson.slice(14, -1));\n  return imagesJson.photos.photo;\n}\n\nfunction urlFromProperties(farmId, serverId, id, secret) {\n  return `https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}_q.jpg`;\n}\n\nfunction generateRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction generateRandomDate(minYear, maxYear, minMonth, maxMonth, minDay, maxDay) {\n  const year = generateRandomInt(minYear, maxYear);\n  const month = generateRandomInt(minMonth, maxMonth);\n  const day = generateRandomInt(minDay, maxDay);\n  return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`;\n}\n\nfunction generateApiEndpoint() {\n  const date = generateRandomDate(MIN_YEAR, MAX_YEAR, MIN_MONTH, MAX_MONTH, MIN_DAY, MAX_DAY);\n  const page = generateRandomInt(1, MAX_PAGE);\n  return `https://www.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&safe_search=3&page=${page}&date=${date}&per_page=${QUERY_SIZE}`;\n}","map":{"version":3,"sources":["/Users/kevincolkitt/Desktop/rb/client/src/imageUtils.js"],"names":["API_KEY","QUERY_SIZE","MIN_YEAR","MAX_YEAR","MIN_MONTH","MAX_MONTH","MIN_DAY","MAX_DAY","MAX_PAGE","fetchImageUrls","rawImages","fetchRawImages","map","image","urlFromProperties","farm","server","id","secret","response","fetch","generateApiEndpoint","rawJson","text","imagesJson","JSON","parse","slice","photos","photo","farmId","serverId","generateRandomInt","min","max","Math","ceil","floor","random","generateRandomDate","minYear","maxYear","minMonth","maxMonth","minDay","maxDay","year","month","day","date","page"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAhB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,OAAO,GAAG,CAAhB;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AAGA,OAAO,eAAeC,cAAf,GAAgC;AAEnC,QAAMC,SAAS,GAAG,MAAMC,cAAc,EAAtC;AAEA,SAAOD,SAAS,CAACE,GAAV,CAAcC,KAAK,IAAIC,iBAAiB,CAACD,KAAK,CAACE,IAAP,EAAaF,KAAK,CAACG,MAAnB,EAA2BH,KAAK,CAACI,EAAjC,EAAqCJ,KAAK,CAACK,MAA3C,CAAxC,CAAP;AACH;;AAED,eAAeP,cAAf,GAAgC;AAC5B,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACC,mBAAmB,CAAC,EAAD,CAApB,CAA5B,CAD4B,CAG5B;;AACA,QAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AAEA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,KAAR,CAAc,EAAd,EAAkB,CAAC,CAAnB,CAAX,CAAnB;AAEA,SAAOH,UAAU,CAACI,MAAX,CAAkBC,KAAzB;AACH;;AAGD,SAASf,iBAAT,CAA2BgB,MAA3B,EAAmCC,QAAnC,EAA6Cd,EAA7C,EAAiDC,MAAjD,EAAyD;AACrD,SAAQ,eAAcY,MAAO,qBAAoBC,QAAS,IAAGd,EAAG,IAAGC,MAAO,QAA1E;AACH;;AAGD,SAASc,iBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AACjCD,EAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;AACH;;AAED,SAASM,kBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8CC,QAA9C,EAAwDC,QAAxD,EAAkEC,MAAlE,EAA0EC,MAA1E,EAAkF;AAC9E,QAAMC,IAAI,GAAGd,iBAAiB,CAACQ,OAAD,EAAUC,OAAV,CAA9B;AACA,QAAMM,KAAK,GAAGf,iBAAiB,CAACU,QAAD,EAAWC,QAAX,CAA/B;AACA,QAAMK,GAAG,GAAGhB,iBAAiB,CAACY,MAAD,EAASC,MAAT,CAA7B;AAEA,SAAQ,GAAEC,IAAK,IAAGC,KAAK,GAAG,EAAR,GAAa,GAAb,GAAkB,EAAG,GAAEA,KAAM,IAAGC,GAAG,GAAG,EAAN,GAAW,GAAX,GAAgB,EAAG,GAAEA,GAAI,EAA3E;AAEH;;AACD,SAAS3B,mBAAT,GAA+B;AAC3B,QAAM4B,IAAI,GAAGV,kBAAkB,CAACrC,QAAD,EAAWC,QAAX,EAAqBC,SAArB,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoDC,OAApD,CAA/B;AACA,QAAM2C,IAAI,GAAGlB,iBAAiB,CAAC,CAAD,EAAIxB,QAAJ,CAA9B;AAEA,SAAQ,uFAAsFR,OAAQ,mCAAkCkD,IAAK,SAAQD,IAAK,aAAYhD,UAAW,EAAjL;AACH","sourcesContent":["const API_KEY = 'b41ebc557f327c6c95cd8ab3ce1b25f6'\nconst QUERY_SIZE = 36\nconst MIN_YEAR = 2016\nconst MAX_YEAR = 2020\nconst MIN_MONTH = 1\nconst MAX_MONTH = 13\nconst MIN_DAY = 1\nconst MAX_DAY = 29\nconst MAX_PAGE = 8\n\n\nexport async function fetchImageUrls() {\n\n    const rawImages = await fetchRawImages()\n\n    return rawImages.map(image => urlFromProperties(image.farm, image.server, image.id, image.secret))\n}\n\nasync function fetchRawImages() {\n    const response = await fetch(generateApiEndpoint(50))\n\n    //Bad response status\n    const rawJson = await response.text()\n\n    const imagesJson = JSON.parse(rawJson.slice(14, -1))\n\n    return imagesJson.photos.photo;\n}\n\n\nfunction urlFromProperties(farmId, serverId, id, secret) {\n    return `https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}_q.jpg`\n}\n\n\nfunction generateRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction generateRandomDate(minYear, maxYear, minMonth, maxMonth, minDay, maxDay) {\n    const year = generateRandomInt(minYear, maxYear)\n    const month = generateRandomInt(minMonth, maxMonth)\n    const day = generateRandomInt(minDay, maxDay)\n\n    return `${year}-${month < 10 ? '0': ''}${month}-${day < 10 ? '0': ''}${day}`\n\n}\nfunction generateApiEndpoint() {\n    const date = generateRandomDate(MIN_YEAR, MAX_YEAR, MIN_MONTH, MAX_MONTH, MIN_DAY, MAX_DAY)\n    const page = generateRandomInt(1, MAX_PAGE)\n\n    return `https://www.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&safe_search=3&page=${page}&date=${date}&per_page=${QUERY_SIZE}`\n}\n"]},"metadata":{},"sourceType":"module"}